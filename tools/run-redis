#! /usr/bin/env python3

from argparse import ArgumentParser
from copy import deepcopy
from IPython import embed
from multiprocessing import cpu_count
from pathlib import Path
from progress.bar import ChargingBar as Bar
from tempfile import TemporaryDirectory
from subprocess import DEVNULL, PIPE, STDOUT

import logging
import time
import os
import pandas as pd
import psutil
import re
import shlex
import socket
import subprocess
import sys
import yaml

def get_open_port():
    import socket
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.bind(("",0))
    s.listen(1)
    port = s.getsockname()[1]
    s.close()
    return port

class RedisServer:

    PMFILE_RE = re.compile(r'^pmfile (\S+) \S+')

    def __init__(self, dir, config_file):
        assert isinstance(dir, Path), 'dir must be a path!'
        assert dir.exists(), f'{str(dir)} does not exist!'
        assert isinstance(config_file, Path), 'config_file must be a path!'
        assert config_file.exists(), f'{str(config_file)} does not exist!'

        self.dir = dir
        self.config_file = config_file

        # Get a free port
        # https://stackoverflow.com/questions/2838244/get-open-tcp-port-in-python/2838309#2838309
        self.port = get_open_port()

        self.env = deepcopy(os.environ)
        # Some PMDK defs.
        self.env['PMEM_NO_MOVNT'] = '1'

        # We should find the pmfile in the config_file
        with config_file.open() as f:
            line = f.readline()
            while line:
                if 'pmfile' in line:
                    matches = self.PMFILE_RE.match(line)
                    if matches:
                        self.pmfile = Path(matches.group(1))
                        break

                line = f.readline()

        assert hasattr(self, 'pmfile'), 'Could not find pmfile in config file!'

    def __del__(self):
        if hasattr(self, 'proc'):
            self.proc.terminate()

    def start(self, server):
        import getpass
        binary = self.dir / server
        assert binary.exists(), f'{str(binary)} not found!'

        # First, remove the old pmfile if it exists
        if self.pmfile.exists():
            self.pmfile.unlink()
        
        # Next, assemble the server arguments
        args = shlex.split(
            (f'numactl -N 1 -m 1 {str(binary)} {str(self.config_file)} --pmfile'
            f' /mnt/pmem/redis-{getpass.getuser()}.pmem 1gb --port {self.port}')
        )
        self.proc = subprocess.Popen(args, stdout=DEVNULL, stderr=DEVNULL)
        # self.proc = subprocess.Popen(args)

        # Make sure it's up and running
        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        while True:
            try:
                s.connect(('localhost', self.port))
                s.sendall('PING\r\n'.encode())
                resp = s.recv(1024).decode()
                assert resp == '+PONG\r\n', f'"{resp}" is invalid!'
                s.close()
                break
            except ConnectionRefusedError:
                time.sleep(0.5)
        
    
    def shutdown(self, check_pmfile=True):
        assert hasattr(self, 'proc'), 'Redis server not started, therefor cannot stop!'
        self.proc.terminate()
        self.proc.wait()
        if check_pmfile:
            assert self.pmfile.exists(), f'Server never created the pmfile ({str(self.pmfile)})!'
        del self.proc

    @classmethod
    def servers(cls):
        yield 'redis-server-dumb'
        # yield 'redis-server-repair'
        yield 'redis-server'
        yield 'redis-server-trace'
        # yield 'redis-server-noflush'
        # yield 'redis-server-heuristic'


class YCSBRunner:

    @staticmethod
    def workloads():
        for x in ['a', 'b', 'c', 'd', 'e', 'f']:
            yield f'workload{x}'

    NREC = 10000
    NOPS = 10000

    NTHREADS = 1

    TP_RE = re.compile(r'\[OVERALL\], Throughput\(ops/sec\), (\S+)')

    def __init__(self, dir, port):
        assert isinstance(dir, Path), 'dir must be a path!'
        assert dir.exists(), f'{str(dir)} does not exist!'
        self.dir = dir

        self.ycsb_bin = self.dir / 'bin' / 'ycsb'
        assert self.ycsb_bin.exists, f'{str(self.ycsb_bin)} not found!'

        self.workload_dir = self.dir / 'workloads'
        assert self.workload_dir.exists(), f'{str(self.workload_dir)} not found!'

        self.PARAMS = (f'-p "redis.host=127.0.0.1" -p "redis.port={port}" '
              f'-p "recordcount={self.NREC}" -p "operationcount={self.NOPS * self.NTHREADS}" '
              f'-threads {self.NTHREADS}')
        
        self.LOAD_PARAMS = (f'-p "redis.host=127.0.0.1" -p "redis.port={port}" '
              f'-p "recordcount={self.NREC}" -threads {cpu_count()}')

    def _do_command(self, workload, command):
        bin_str = str(self.ycsb_bin)
        workload_str = str(self.workload_dir / workload)

        if command == 'load':
            arg_str = f'numactl -m 0 -N 0 {bin_str} {command} redis -s -P {workload_str} {self.LOAD_PARAMS}'
        else:
            arg_str = f'numactl -m 0 -N 0 {bin_str} {command} redis -s -P {workload_str} {self.PARAMS}'

        args = shlex.split(arg_str)

        res = subprocess.run(args, cwd=self.dir, stdout=PIPE, stderr=STDOUT)
        # res = subprocess.run(args, cwd=self.dir)
        # res.check_returncode()
        # embed()
        # exit()

        output = res.stdout.decode()
        for line in output.split('\n'):
            matches = self.TP_RE.match(line)
            if matches:
                return matches.group(1)
        
        raise Exception('did not get throughput!')

 
    def load(self, workload):
        ''' Returns throughput. '''
        return self._do_command(workload, 'load')

    def run(self, workload):
        ''' Returns throughtput. '''
        return self._do_command(workload, 'run')


def run(args):

    df = pd.DataFrame(columns=['Server', 'Command', 'Workload', 'Trial', 'Throughput'])

    redis = RedisServer(args.redis_directory, args.config_file)

    YCSBRunner.NOPS = args.nops
    YCSBRunner.NREC = args.nrecords
    ycsb = YCSBRunner(args.ycsb_directory, redis.port)

    # +1 for LOAD
    nitems = len(list(redis.servers())) * (len(list(ycsb.workloads()))) * args.trials

    TheBar = lambda: Bar('Running Tests', suffix='[%(index)d/%(max)d] ETA: %(eta)ds', max=nitems)

    with TheBar() as bar:
        for server in redis.servers():
            # Just load once
            # print('starting!')
            redis.start(server)
            # print('started!')
            # -- shouldn't matter
            load_tp = ycsb.load('workloada')
            load_data = {'Server': server, 'Workload': 'workloada', 'Command': 'load', 
                'Trial': 0, 'Throughput': load_tp}
            df = df.append(load_data, ignore_index=True)
            # bar.next()

            for trial in range(args.trials):
                for workload in ycsb.workloads():    
                    run_tp = ycsb.run(workload)
    
                    run_data = {'Server': server, 'Workload': workload, 'Command': 'run', 
                                'Trial': trial, 'Throughput': run_tp}

                    df = df.append(run_data, ignore_index=True)
                    bar.next()

            redis.shutdown(False)
    
    df.to_csv(args.output_file)

def main():
    parser = ArgumentParser('Run the performance evaluation.')
    parser.add_argument('--output-file', type=Path, help='Output CSV of data',
                        default=Path('redis_results.csv'),)
    parser.add_argument('--redis-directory', '-r', type=Path, 
                        default=Path(r'${CMAKE_SOURCE_DIR}/deps/redis/src'),
                        help='Where redis lives')
    parser.add_argument('--ycsb-directory', '-y', type=Path, 
                        default=Path(r'${CMAKE_SOURCE_DIR}/deps/YCSB'),
                        help='Where YCSB lives')
    parser.add_argument('--config-file', type=Path, help='where the config is',
                        default=Path(r'${CMAKE_SOURCE_DIR}/deps/redis-eval.conf'))
    parser.add_argument('--trials', '-t', type=int, help='number of trials',
                        default=10)
    parser.add_argument('--servers', '-s', type=str, nargs='+')

    parser.add_argument('--nrecords', type=int, help='Number of records for YCSB database.',
                        default=YCSBRunner.NREC)
    parser.add_argument('--nops', type=int, help='Number of operations for YCSB database.',
                        default=YCSBRunner.NOPS)

    args = parser.parse_args()
    assert args.config_file.exists(), f'{str(args.config_file)} does not exist!'
    assert args.redis_directory.exists()
    assert args.output_file.parent.exists()

    run(args)

if __name__ == '__main__':
    main()